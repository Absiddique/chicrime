{
    "contents" : "library(shiny)\nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(RJSONIO)\nlibrary(png)\nlibrary(grid)\nlibrary(RCurl)\nlibrary(plyr)\nlibrary(markdown)\nlibrary(rCharts)\nlibrary(parallel)\n\n## Define server logic required to summarize and view the selected dataset\nshinyServer(function(input, output) {\n  \n  \n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  ## Reactive Functions\n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  ## Get Geocode\n  map.geocode <- reactive({\n    suppressMessages(data.frame(geocode = geocode(input$poi)))\n  })\n  \n  ## Define Period\n  map.period <- reactive({\n    format(seq(input$start, length=input$months, by=\"months\"), \"%Y-%m\")\n  })\n  \n  ## Create Data Framework\n  create.df <- reactive({\n    \n    ## Use Multicore if available\n    num_core <- parallel::detectCores()\n    if (num_core > 1) {\n      registerDoSNOW(makeCluster(max(c(2, (num_core - 1))), type=\"SOCK\"))\n    }\n    \n    ## Mini function 1\n    mini.unlist <- function(temp.data) {\n      temp.data <- unlist(temp.data)\n      output <- data.frame(\n        category = temp.data[1],\n        streetid = temp.data[4],\n        streetname = temp.data[7],\n        latitude = as.numeric(temp.data[5]),\n        longitude = as.numeric(temp.data[8]),\n        month = temp.data[10],\n        type = temp.data[11])\n      return(output)\n    }\n    \n    ## Mini function 2\n    mini.getdata <- function(temp.period, temp.geocode, n.period) {\n      df <- ldply(.data = fromJSON(getURL(paste0(\"https://data.cityofchicago.org/Public-Safety/Crimes-2001-to-present/ijzp-q8t2\",\n                                                 temp.geocode[2], \"&lng=\", temp.geocode[1],\n                                                 \"&date=\", temp.period[n.period]))), .fun = mini.unlist)\n      return(df)\n    }\n    \n    ## Use Reactive Functions\n    temp.geocode <- map.geocode()\n    temp.period <- map.period()\n    \n    ## Download data and reformat (in parallel mode if num_core >= 2)\n    df <- foreach(p.period = 1:length(temp.period),\n                  .combine = rbind,\n                  .multicombine = TRUE,\n                  .packages = c(\"ggmap\", \"RJSONIO\", \"plyr\", \"RCurl\")) %dopar%\n      mini.getdata(temp.period, temp.geocode, n.period = p.period)\n    \n    ## Output\n    df\n  })\n  \n  \n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  ## Output 1 - Data Table\n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  output$datatable <- renderDataTable({\n    \n    if (input$poi == \"Demo (London)\") {\n      load(\"./demo/demo_london_eye.rda\")\n    } else {\n      df <- create.df()\n    }\n    \n    df\n    \n  }, options = list(aLengthMenu = c(10, 25, 50, 100, 1000), iDisplayLength = 10))\n  \n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  ## Output 2 - Heat Map\n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  output$map <- renderPlot({\n    \n    if (input$poi == \"Demo (London)\") {\n      \n      ## Use pre-loaded demo data\n      load(\"./demo/demo_london_eye.rda\")\n      \n      ## Create a data frame for the map center (point of interest)\n      center.df <- data.frame(temp.geocode, location = \"London\")\n      colnames(center.df) <- c(\"lon\",\"lat\",\"location\")\n      \n      \n    } else {\n      \n      ## Use Reactive Functions\n      temp.geocode <- map.geocode()\n      temp.period <- map.period()\n      \n      ## Get df\n      df <- create.df()\n      \n      ## Create a data frame for the map center (point of interest)\n      center.df <- data.frame(temp.geocode, location = input$poi)\n      colnames(center.df) <- c(\"lon\",\"lat\",\"location\")\n    }\n    \n    \n    ## Download base map using {ggmap}\n    ## Note that a PNG file \"ggmapTemp.png\" will be created\n    ## The PNG is not needed for the analysis, you can delete it later\n    temp.color <- \"color\"\n    if (input$bw) {temp.color <- \"bw\"}\n    \n    temp.scale <- 1\n    if (input$res) {temp.scale <- 2}\n    \n    map.base <- get_googlemap(\n      as.matrix(temp.geocode),\n      maptype = input$type, ## Map type as defined above (roadmap, terrain, satellite, hybrid)\n      language = \"en-EN\",  ## Code Ref: http://msdn.microsoft.com/en-us/library/ms533052(v=vs.85).aspx\n      zoom = input$zoom,            ## 14 is just about right for a 1-mile radius\n      color = temp.color,   ## \"color\" or \"bw\" (black & white)\n      scale = temp.scale,   ## Set it to 2 for high resolution output\n    )\n    \n    ## Convert the base map into a ggplot object\n    ## All added Cartesian coordinates to enable more geom options later on\n    map.base <- ggmap(map.base, extend = \"panel\") + coord_cartesian() + coord_fixed(ratio = 1.5)\n    \n    ## Main ggplot\n    map.final <- map.base  +    \n      \n      ## Create a density plot\n      ## based on the ggmap's crime data example\n      stat_density2d(aes(x = longitude, \n                         y = latitude, \n                         fill = ..level.., \n                         alpha = ..level..),\n                     size = input$boundwidth, \n                     bins = input$bins,  ## Change and experiment with no. of bins\n                     data = df, \n                     geom = \"polygon\", \n                     colour = input$boundcolour) +\n      \n      ## Configure the scale and panel\n      scale_fill_gradient(low = input$low, high = input$high) +\n      scale_alpha(range = input$alpharanage) +\n      \n      ## Title and labels    \n      labs(x = \"Longitude\", y = \"Latitude\") +\n      ggtitle(paste(\"Crimes around \", center.df$location, \n                    \" from \", temp.period[1],\n                    \" to \", temp.period[length(temp.period)], sep=\"\")) +\n      \n      ## Other theme settings\n      theme_bw() +\n      theme(\n        plot.title = element_text(size = 36, face = 'bold', vjust = 2),\n        #title = element_text(face = 'bold'),\n        axis.text = element_blank(),\n        axis.title = element_blank(),\n        axis.ticks = element_blank(),\n        legend.position = \"none\",\n        #axis.text.x = element_text(size = 28),\n        #axis.text.y = element_text(size = 28),\n        #axis.title.x = element_text(size = 32),\n        #axis.title.y = element_text(size = 32),\n        strip.background = element_rect(fill = 'grey80'),\n        strip.text = element_text(size = 26)\n      )\n    \n    ## Use Watermark?  \n    if (input$watermark & input$facet == \"none\") {\n      map.final <- map.final + annotate(\"text\", x = center.df$lon, y = -Inf, \n                                        label = \"blenditbayes.blogspot.co.uk\",\n                                        vjust = -1.5, col = \"steelblue\", \n                                        cex = 12,\n                                        fontface = \"bold\", alpha = 0.5)\n    }\n    \n    ## Use Facet?\n    if (input$facet == \"type\") {map.final <- map.final + facet_wrap(~ type)}\n    if (input$facet == \"month\") {map.final <- map.final + facet_wrap(~ month)}\n    if (input$facet == \"category\") {map.final <- map.final + facet_wrap(~ category)}\n    \n    ## Save data for next output\n    save(df, center.df, map.final, file = \"temp.Rdata\")\n    \n    ## Final Print\n    print(map.final)\n    \n  }, width = 1280, height = 1280)\n  \n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  ## Output 3 - Trends 1\n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  output$trends1 <- renderPlot({\n    \n    if (input$poi == \"Demo (London)\") {\n      \n      ## Use pre-loaded demo data\n      load(\"./demo/demo_london_eye.rda\")\n      \n      ## Create a data frame for the map center (point of interest)\n      center.df <- data.frame(temp.geocode, location = \"London\")\n      colnames(center.df) <- c(\"lon\",\"lat\",\"location\")\n      \n      \n    } else {\n      \n      ## Use Reactive Functions\n      temp.geocode <- map.geocode()\n      temp.period <- map.period()\n      \n      ## Get df\n      df <- create.df()\n      \n      ## Create a data frame for the map center (point of interest)\n      center.df <- data.frame(temp.geocode, location = input$poi)\n      colnames(center.df) <- c(\"lon\",\"lat\",\"location\")\n    }\n    \n    ## Small Summary df\n    #df2 <- ddply(df, .(category, month), summarise, total = length(category))\n    \n    ## Plot\n    plot1 <- ggplot(df, aes(x = month, fill = category)) + \n      geom_bar(colour = \"black\") + facet_wrap(~ category) +\n      labs(x = \"Months\", y = \"Crime Records\") + \n      ggtitle(paste(\"Crimes around \", center.df$location, \n                    \": Trends from \", temp.period[1],\n                    \" to \", temp.period[length(temp.period)], sep=\"\")) +\n      theme_bw() +\n      theme(\n        plot.title = element_text(size = 36, face = 'bold', vjust = 2),\n        #axis.text.x = element_text(angle = 90, hjust = 1),\n        axis.text.x = element_blank(),\n        axis.text = element_text(size = 24),\n        axis.title.x = element_text(size = 32),\n        axis.title.y = element_text(size = 32),\n        axis.ticks.x = element_blank(),\n        strip.background = element_rect(fill = 'grey80'),\n        strip.text.x = element_text(size = 26),\n        legend.position = \"none\",\n        panel.grid = element_blank()\n      )\n    \n    ## Print\n    print(plot1)\n    \n  }, width = 1280, height = 1280)\n  \n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  ## Output x - rCharts\n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  output$myChart <- renderChart({\n    \n    if (input$poi == \"Demo (London)\") {\n      \n      ## Use pre-loaded demo data\n      load(\"./demo/demo_london_eye.rda\")\n      \n    } else {\n      \n      ## Use Reactive Functions\n      temp.geocode <- map.geocode()\n      temp.period <- map.period()\n      \n      ## Get df\n      df <- create.df()\n      \n    }\n    \n    ## nvd3\n    n1 <- nPlot( ~ category, group = 'month', data = df, type = 'multiBarHorizontalChart')\n    #n1 <- nPlot(~ cyl, group = 'gear', data = mtcars, type = 'multiBarHorizontalChart')\n    n1$chart(showControls = F)\n    \n    ## Needed for Shiny\n    n1$addParams(dom = 'myChart', width = 700, height = 1000)\n    # n1$addParams(width = 400, height = 400, dom = 'myChart', title = \"rCharts Title here ...\")\n    return(n1)\n    \n  })\n  \n  \n  \n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  ## Output 4 - news (HTML)\n  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \n  output$html <- renderText({\n    \n    \"<!DOCTYPE html>\n    <html>\n    <body>\n    \n    <h1>My First Heading</h1>\n    \n    <p>My first paragraph.</p>\n    \n    </body>\n    </html>\"\n    \n  })\n  \n})",
    "created" : 1392589144504.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "883737948",
    "id" : "D9E0623F",
    "lastKnownWriteTime" : 1392593149,
    "path" : "E:/Chicago Crime- Alpha/chitest/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}